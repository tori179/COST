const express = require("express");
const cors = require("cors");
const OpenAI = require("openai");
const mysql = require('mysql2/promise');

const app = express();
const port = 8888;

app.use(cors());
app.use(express.json());

const openai = new OpenAI({
  apiKey: "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",
  baseURL: "https://integrate.api.nvidia.com/v1",
});

const pool = mysql.createPool({
  host: 'localhost',
  user: 'root',
  password: '', // s·ª≠a n·∫øu b·∫°n c√≥ m·∫≠t kh·∫©u MySQL
  database: 'learnhub'
});

app.post("/chat", async (req, res) => {
  const { message } = req.body;
  if (/^(xin ch√†o|hello|hi|ch√†o b·∫°n|ch√†o|xin ch√†o chatbot)$/i.test(message.trim())) {
    return res.json({ response: "Xin ch√†o! üòä Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Learn Hub. B·∫°n c·∫ßn h·ªó tr·ª£ th√¥ng tin v·ªÅ kh√≥a h·ªçc, l·ªô tr√¨nh h·ªçc, ƒëƒÉng k√Ω, thanh to√°n hay ∆∞u ƒë√£i n√†o ·∫°?" });
  }
  let extraInfo = "";
  let found = false;

  try {
    // Kh√≥a h·ªçc
    if (/kh√≥a h·ªçc|course|h·ªçc g√¨|danh s√°ch kh√≥a h·ªçc|c√≥ nh·ªØng kh√≥a n√†o/i.test(message)) {
      const [courses] = await pool.query('SELECT ten_khoa_hoc, mo_ta_ngan FROM loai_khoa_hocs');
      extraInfo = "C√°c kh√≥a h·ªçc n·ªïi b·∫≠t:\n" +
        courses.map(c => `- ${c.ten_khoa_hoc}: ${c.mo_ta_ngan || ''}`).join('\n');
      found = true;
    }
    // B√†i h·ªçc
    else if (/b√†i h·ªçc|lesson|n·ªôi dung h·ªçc|h·ªçc ph·∫ßn/i.test(message)) {
      const [lessons] = await pool.query('SELECT ten_bai_hoc, mo_ta_ngan FROM bai_hocs LIMIT 10');
      extraInfo = "M·ªôt s·ªë b√†i h·ªçc ti√™u bi·ªÉu:\n" +
        lessons.map(l => `- ${l.ten_bai_hoc}: ${l.mo_ta_ngan || ''}`).join('\n');
      found = true;
    }
    // B√†i vi·∫øt
    else if (/b√†i vi·∫øt|tin t·ª©c|news|article/i.test(message)) {
      const [posts] = await pool.query('SELECT tieu_de, mo_ta_ngan FROM bai_viets LIMIT 5');
      extraInfo = "M·ªôt s·ªë b√†i vi·∫øt m·ªõi:\n" +
        posts.map(p => `- ${p.tieu_de}: ${p.mo_ta_ngan || ''}`).join('\n');
      found = true;
    }
    // H·ªçc vi√™n
    else if (/h·ªçc vi√™n|user|kh√°ch h√†ng|student/i.test(message)) {
      const [students] = await pool.query('SELECT ho_ten, email FROM khach_hangs LIMIT 5');
      extraInfo = "M·ªôt s·ªë h·ªçc vi√™n ti√™u bi·ªÉu:\n" +
        students.map(s => `- ${s.ho_ten} (${s.email})`).join('\n');
      found = true;
    }
    // Gi·∫£ng vi√™n/Nh√¢n vi√™n
    else if (/gi·∫£ng vi√™n|nh√¢n vi√™n|teacher|mentor|staff/i.test(message)) {
      const [teachers] = await pool.query('SELECT ho_ten, email FROM nhan_viens LIMIT 5');
      extraInfo = "M·ªôt s·ªë gi·∫£ng vi√™n/nh√¢n vi√™n:\n" +
        teachers.map(t => `- ${t.ho_ten} (${t.email})`).join('\n');
      found = true;
    }
    // T√†i ch√≠nh/giao d·ªãch
    else if (/giao d·ªãch|t√†i ch√≠nh|thanh to√°n|transaction|payment/i.test(message)) {
      const [trans] = await pool.query('SELECT so_tien, noi_dung, created_at FROM tai_chinhs ORDER BY created_at DESC LIMIT 5');
      extraInfo = "M·ªôt s·ªë giao d·ªãch g·∫ßn ƒë√¢y:\n" +
        trans.map(t => `- ${t.noi_dung}: ${t.so_tien} VND (${t.created_at})`).join('\n');
      found = true;
    }
    // Ph√¢n quy·ªÅn
    else if (/quy·ªÅn|ph√¢n quy·ªÅn|role|permission/i.test(message)) {
      const [roles] = await pool.query('SELECT ten_quyen, mo_ta FROM phan_quyens');
      extraInfo = "C√°c quy·ªÅn h·ªá th·ªëng:\n" +
        roles.map(r => `- ${r.ten_quyen}: ${r.mo_ta || ''}`).join('\n');
      found = true;
    }
    // N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan
    if (!found) {
      extraInfo = "Xin l·ªói, t√¥i ch·ªâ c√≥ th·ªÉ h·ªó tr·ª£ c√°c th√¥ng tin v·ªÅ kh√≥a h·ªçc, b√†i h·ªçc, b√†i vi·∫øt, h·ªçc vi√™n, gi·∫£ng vi√™n, t√†i ch√≠nh, ph√¢n quy·ªÅn c·ªßa Learn Hub. N·∫øu b·∫°n c·∫ßn h·ªó tr·ª£ th√™m, vui l√≤ng li√™n h·ªá email support@learnhub.com ho·∫∑c hotline 0123.456.789 ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n.";
    }

    const systemPrompt = `
      B·∫°n l√† chuy√™n vi√™n h·ªó tr·ª£ kh√°ch h√†ng c·ªßa Learn Hub - n·ªÅn t·∫£ng h·ªçc l·∫≠p tr√¨nh online.
      Ch·ªâ tr·∫£ l·ªùi ƒë√∫ng tr·ªçng t√¢m c√¢u h·ªèi, kh√¥ng ph√¢n t√≠ch, kh√¥ng h∆∞·ªõng d·∫´n th√™m, kh√¥ng n√≥i v·ªÅ quy tr√¨nh, kh√¥ng g·ª£i √Ω, kh√¥ng gi·∫£i th√≠ch lan man.
      Kh√¥ng ƒë∆∞·ª£c tr·∫£ l·ªùi d∆∞·ªõi d·∫°ng <think> ho·∫∑c b·∫•t k·ª≥ nh√£n n√†o kh√°c. Ch·ªâ tr·∫£ l·ªùi n·ªôi dung ch√≠nh x√°c, kh√¥ng ƒë∆∞·ª£c n√≥i v·ªÅ suy nghƒ© c·ªßa m√¨nh.
      Tr·∫£ l·ªùi ng·∫Øn g·ªçn, chuy√™n nghi·ªáp, ƒë√∫ng th√¥ng tin c·∫ßn thi·∫øt, gi·ªëng nh∆∞ m·ªôt chuy√™n vi√™n th·ª±c th·ª•.
      N·∫øu kh√¥ng bi·∫øt, h√£y tr·∫£ l·ªùi: "Vui l√≤ng li√™n h·ªá b·ªô ph·∫≠n h·ªó tr·ª£ qua email support@learnhub.com ho·∫∑c hotline 0123.456.789."
      ${extraInfo}
      Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, t·ªëi ƒëa 2-3 c√¢u.
    `;

    const completion = await openai.chat.completions.create({
      model: "deepseek-ai/deepseek-r1",
      messages: [
        {
          role: "system",
          content: systemPrompt,
        },
        {
          role: "user",
          content: message,
        },
      ],
      temperature: 0.6,
      top_p: 0.7,
      max_tokens: 512,
      stream: false,
    });

    if (!completion || !completion.choices || completion.choices.length === 0) {
      return res.status(500).json({ error: "API kh√¥ng tr·∫£ v·ªÅ ph·∫£n h·ªìi h·ª£p l·ªá" });
    }

    // L·ªçc b·ªè c√°c d√≤ng <think> ho·∫∑c nh√£n kh√¥ng c·∫ßn thi·∫øt
    let reply = completion.choices[0].message.content
      .split('\n')
      .filter(line => !line.trim().startsWith('<think>') && !line.trim().startsWith('Suy nghƒ©:') && !line.trim().startsWith('Ph√¢n t√≠ch:'))
      .join(' ');
    res.json({ response: reply.trim() });
  } catch (error) {
    console.error("L·ªói khi g·ªçi API OpenAI ho·∫∑c MySQL:", error);
    res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu" });
  }
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
